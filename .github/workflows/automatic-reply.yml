# This workflow helps to automate replying to newly created issues and PRs in a repository.
# Standard comment templates are set up for that.
# The workflow offers a convenient way to set up your own comment templates for both issues and PRs using the following inputs:
# - issue-comment-template
# - pr-comment-template
# These inputs support using the reserved template: <userName> to credit the issue's or PR's author.

name: Automatic reply to new issues and PRs

on:
  workflow_call:
    inputs:
        issue-comment-template:
          description: "Optional input to set up a comment template for newly created issues"
          required: false
          type: string
          default: "Hi <userName> :wave:! Thanks for the issue, it's now tracked by our team of maintainers. As soon as an investigation is done, they'll get back to you with updates."
        pr-comment-template:
          description: "Optional input to set up a comment template for newly created PRs"
          required: false
          type: string
          default: "Hi <userName> :wave:! Thanks for the PR, it's now tracked by our team of maintainers. As soon as an investigation is done, they'll get back to you with feedback."

jobs:
  automatic-reply:
    runs-on: ubuntu-latest
    steps:
    - name: Get issue/PR number
      id: get-information
      run: |
        $EntityNumber = ("${{github.event_name}}" -ceq "issues" ) ? "${{github.event.issue.number}}" : "${{github.event.pull_request.number}}"
        echo "ENTITY_NUMBER=$($EntityNumber)" >> $Env:GITHUB_OUTPUT
      shell: pwsh

    - name: Create comment body
      id: create-comment
      run: |
        $CommentMessage = ("${{github.event_name}}" -ceq "issues" ) ? "${{inputs.issue-comment-template}}" : "${{inputs.pr-comment-template}}"
        $FormattedMessage = $CommentMessage.replace("<userName>", "@${{github.event.sender.login}}")
        echo "MESSAGE=$($FormattedMessage)" >> $Env:GITHUB_OUTPUT
      shell: pwsh

    - name: Add comment to the Issue/PR
      run: |
        $RequestBody = @'
        {
          "body":"${{steps.create-comment.outputs.MESSAGE}}"
        }
        '@

        $Headers = @{
            Accept = "application/vnd.github+json";
            Authorization = "Bearer ${{github.token}}";
            "X-GitHub-Api-Version" = "2022-11-28";
        }
        
        Invoke-RestMethod -Uri "https://api.github.com/repos/${{github.repository}}/issues/${{steps.get-information.outputs.ENTITY_NUMBER}}/comments" -Method "Post" -Body $RequestBody -Headers $Headers
      shell: pwsh
